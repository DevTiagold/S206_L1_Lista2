{
	"info": {
		"_postman_id": "d3c98d6d-310b-4515-902c-cda286a6661b",
		"name": "FetinNetLista2_Projetos",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "44751199"
	},
	"item": [
		{
			"name": "Alunos",
			"item": [
				{
					"name": "Cadastro Aluno - Sucesso",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random string for unique values\r",
									"function randomString(length) {\r",
									"    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate dynamic variables\r",
									"const randomEmail = `user_${randomString(5)}@example.com`;\r",
									"const randomName = `Name_${randomString(6)}`;\r",
									"const randomPassword = randomString(12);\r",
									"\r",
									"// Set variables in the environment (or collection/local scope)\r",
									"pm.variables.set('email', randomEmail);\r",
									"pm.variables.set('nome', randomName);\r",
									"pm.variables.set('password', randomPassword);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{Cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"nome\": \"{{nome}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"acesso\": \"USER\",\r\n    \"ativo\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/api/v1/Aluno/add"
					},
					"response": []
				},
				{
					"name": "Cadastro Aluno - Erro (Ja cadastrado)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{Cookie}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"jacadastrado@gmail.com\",\r\n    \"nome\": \"USER2\",\r\n    \"password\": \"123\",\r\n    \"acesso\": \"USER\",\r\n    \"ativo\": 1\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BaseURL}}/api/v1/Aluno/add"
					},
					"response": []
				},
				{
					"name": "Obtem todos os alunos",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-XSRF-TOKEN",
								"value": "{{Cookie}}",
								"type": "text"
							}
						],
						"url": "{{BaseURL}}/api/v1/Aluno/all"
					},
					"response": []
				}
			],
			"description": "Casos de teste para o contexto de alunos da API."
		},
		{
			"name": "get-csrf-token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"pm.environment.set('Cookie', response.token);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/get-csrf-token"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-XSRF-TOKEN",
						"value": "{{Cookie}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"lara@\",\r\n    \"password\": \"123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/login"
			},
			"response": []
		},
		{
			"name": "Projetos_3_Testes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verificação se cada item tem os campos básicos esperados\r",
							"pm.test(\"Cada item tem os campos básicos esperados\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property('numeroGrupo');\r",
							"        pm.expect(item).to.have.property('titulo');\r",
							"        pm.expect(item).to.have.property('orientador');\r",
							"    });\r",
							"});\r",
							"\r",
							"//Verificação se cada lista de time não está vazio\r",
							"pm.test(\"Lista de times não está vazia\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"//Verificação para forçar erro: verificar se todos os orientadores têm o campo 'senha'\r",
							"pm.test(\"Todos os orientadores têm campo 'senha'\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(function(item) {\r",
							"        pm.expect(item.orientador).to.have.property('senha');\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{BaseURL}}/api/v1/Time/all"
			},
			"response": []
		},
		{
			"name": "Projeto29_3_Testes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verificação se o status é 200 \r",
							"pm.test(\"Status code é 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verificação se o site responde em menos de 1000ms\r",
							"pm.test(\"Tempo de resposta é menor do que 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//Verificação se a resposta é JSON\r",
							"pm.test(\"Resposta é um JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{BaseURL}}/api/v1/Time/29"
			},
			"response": []
		},
		{
      "name": "Projetos_Validacao",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Cada projeto tem ao menos um aluno\", () => {",
              "  projetos.forEach(p => {",
              "    pm.expect(p.alunos.length).to.be.above(0);",
              "  });",
              "});",
              "",
              "pm.test(\"Campos principais têm tipos corretos\", () => {",
              "  projetos.forEach(p => {",
              "    pm.expect(p.id).to.be.a('number');",
              "    pm.expect(p.titulo).to.be.a('string');",
              "    pm.expect(p.categoria.nome).to.be.a('string');",
              "  });",
              "});",
              "",
              "pm.test(\"Projetos estão ordenados por ID crescente\", () => {",
              "  for (let i = 1; i < projetos.length; i++) {",
              "    pm.expect(projetos[i].id).to.be.above(projetos[i - 1].id);",
              "  }",
              "});",
              "",
              "pm.test(\"Todas as categorias têm ID numérico válido\", () => {",
              "  projetos.forEach(p => {",
              "    pm.expect(p.categoria).to.have.property('id');",
              "    pm.expect(p.categoria.id).to.be.a('number');",
              "    pm.expect(p.categoria.id).to.be.above(0);",
              "  });",
              "});",
              "",
              "pm.test(\"Todos os resumos têm pelo menos 30 caracteres\", () => {",
              "  projetos.forEach(p => {",
              "    pm.expect(p).to.have.property('resumo');",
              "    pm.expect(p.resumo.length).to.be.at.least(30);",
              "  });",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{BaseURL}}/api/v1/Projeto/all",
          "host": [
            "{{BaseURL}}"
          ],
          "path": [
            "api",
            "v1",
            "Projeto",
            "all"
          ]
        }
      },
      "response": []
    }
  ]
}
